# В 1977 году Ronald Linn Rivest, Adi Shamir и Leonard Adleman предложили новую криптографическую схему RSA,
# используемую до сих пор. RSA является криптосистемой с открытым ключом: зашифровать сообщение может кто угодно,
# знающий общеизвестный открытый ключ, а расшифровать сообщение — только тот, кто знает специальный секретный ключ.
#
# Желающий использовать систему RSA для получения сообщений должен сгенерировать два простых числа p и q,
# вычислить n = pq и сгенерировать два числа e и d такие, что {ed ≡ 1 ± od{(p - 1)(q - 1)}}
# (заметим, что {(p - 1)(q - 1) = φ(n)}). Числа n и e составляют открытый ключ и являются общеизвестными.
# Число d является секретным ключом, также необходимо хранить в тайне и разложение числа n на простые множители,
# так как это позволяет вычислить секретный ключ d.
#
# Сообщениями в системе RSA являются числа из . Пусть M — исходное сообщение. Для его шифрования вычисляется значение
# (для этого необходимо только знание открытого ключа). Полученное зашифрованное сообщение C передается по каналу связи.
# Для его расшифровки необходимо вычислить значение , а для этого необходимо знание секретного ключа.
#
# Вы перехватили зашифрованное сообщение C и знаете только открытый ключ: числа n и e.
# "Взломайте" RSA — расшифруйте сообщение на основе только этих данных.
#
# Входные данные
# Программа получает на вход три натуральных числа: n, e, C, n ≤ 109, e ≤ 109, C < n.
# Числа n и e являются частью какой-то реальной схемы RSA, т.е. n является произведением двух простых и e
# взаимно просто с φ(n). Число C является результатом шифрования некоторого сообщения M.
#
# Выходные данные
# Выведите одно число M (0 ≤ M < n), которое было зашифровано такой криптосхемой.
import sys


def ex_gcd(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x, y = ex_gcd(b % a, a)
    return gcd, y - (b // a) * x, x


def solve(n, e, c):
    q = 2
    while q * q <= n:
        if n % q == 0:
            p = n // q
            break
        q += 1
    b = (q - 1) * (p - 1)
    g, d, k = ex_gcd(e, b)

    d = (d % b + b) % b

    return pow(c, d, n)


lines = sys.stdin.readlines()
n = int(lines[0])
e = int(lines[1])
c = int(lines[2])

m = solve(n, e, c)
print(m)


